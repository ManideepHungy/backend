generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donation {
  id                 Int              @id @default(autoincrement())
  shiftId            Int?
  organizationId     Int
  donorId            Int?
  shiftSignupId      Int?
  createdAt          DateTime         @default(now())
  summary            Float
  donationLocationId Int
  DonationLocation   DonationLocation @relation(fields: [donationLocationId], references: [id])
  Donor              Donor?           @relation(fields: [donorId], references: [id])
  Organization       Organization     @relation(fields: [organizationId], references: [id])
  Shift              Shift?           @relation(fields: [shiftId], references: [id])
  ShiftSignup        ShiftSignup?     @relation(fields: [shiftSignupId], references: [id])
  DonationItem       DonationItem[]
}

model DonationCategory {
  id             Int            @id @default(autoincrement())
  name           String
  organizationId Int
  icon           String?
  Organization   Organization   @relation(fields: [organizationId], references: [id])
  DonationItem   DonationItem[]
}

model DonationItem {
  id               Int              @id @default(autoincrement())
  donationId       Int
  categoryId       Int
  weightKg         Float
  DonationCategory DonationCategory @relation(fields: [categoryId], references: [id])
  Donation         Donation         @relation(fields: [donationId], references: [id])

  @@unique([donationId, categoryId])
}

model Donor {
  id               Int          @id @default(autoincrement())
  kitchenId        Int
  donorType        String
  email            String?
  firstName        String?
  lastName         String?
  organizationName String?
  phoneNumber      String?
  Donation         Donation[]
  Organization     Organization @relation(fields: [kitchenId], references: [id])
}

model Organization {
  id                    Int                  @id @default(autoincrement())
  name                  String               @unique
  address               String?
  incoming_dollar_value Decimal?             @default(10) @db.Decimal(10, 2)
  email                 String
  mealsvalue            Decimal?             @default(10) @db.Decimal(10, 2)
  DefaultShiftUser      DefaultShiftUser[]
  Donation              Donation[]
  DonationCategory      DonationCategory[]
  DonationLocation      DonationLocation[]
  Donor                 Donor[]
  Module                Module[]
  RecurringShift        RecurringShift[]
  Shift                 Shift[]
  ShiftAbsence          ShiftAbsence[]
  ShiftCategory         ShiftCategory[]
  TermsAndConditions    TermsAndConditions[]
  User                  User[]
  WeighingCategory      WeighingCategory[]
}

model RecurringShift {
  id                 Int                      @id @default(autoincrement())
  name               String
  dayOfWeek          Int?
  startTime          DateTime
  endTime            DateTime
  shiftCategoryId    Int
  location           String
  slots              Int
  organizationId     Int
  isRecurring        Boolean                  @default(true)
  isActive           Boolean                  @default(true)
  DefaultShiftUser   DefaultShiftUser[]
  Organization       Organization             @relation(fields: [organizationId], references: [id])
  ShiftCategory      ShiftCategory            @relation(fields: [shiftCategoryId], references: [id])
  Shift              Shift[]
  ShiftAbsence       ShiftAbsence[]
  registrationFields ShiftRegistrationFields?
}

model Shift {
  id               Int             @id @default(autoincrement())
  name             String
  shiftCategoryId  Int
  startTime        DateTime
  endTime          DateTime
  location         String
  slots            Int
  organizationId   Int
  isActive         Boolean         @default(true)
  recurringShiftId Int?
  Donation         Donation[]
  Organization     Organization    @relation(fields: [organizationId], references: [id])
  RecurringShift   RecurringShift? @relation(fields: [recurringShiftId], references: [id])
  ShiftCategory    ShiftCategory   @relation(fields: [shiftCategoryId], references: [id])
  ShiftAbsence     ShiftAbsence[]
  ShiftSignup      ShiftSignup[]
}

model ShiftCategory {
  id             Int              @id @default(autoincrement())
  name           String
  icon           String?
  organizationId Int
  RecurringShift RecurringShift[]
  Shift          Shift[]
  Organization   Organization     @relation(fields: [organizationId], references: [id])

  @@unique([name, organizationId])
}

model ShiftSignup {
  id          Int        @id @default(autoincrement())
  userId      Int
  shiftId     Int
  checkIn     DateTime?
  checkOut    DateTime?
  mealsServed Int?
  createdAt   DateTime   @default(now())
  Donation    Donation[]
  Shift       Shift      @relation(fields: [shiftId], references: [id])
  User        User       @relation(fields: [userId], references: [id])
}

model ShiftRegistrationFields {
  id                              Int            @id @default(autoincrement())
  requireFirstName                Boolean        @default(true)
  requireLastName                 Boolean        @default(true)
  requireEmail                    Boolean        @default(true)
  requireAgeBracket               Boolean        @default(false)
  requireBirthdate                Boolean        @default(false)
  requirePronouns                 Boolean        @default(false)
  requirePhone                    Boolean        @default(false)
  requireAddress                  Boolean        @default(false)
  requireCity                     Boolean        @default(false)
  requirePostalCode               Boolean        @default(false)
  requireHomePhone                Boolean        @default(false)
  requireEmergencyContactName     Boolean        @default(false)
  requireEmergencyContactNumber   Boolean        @default(false)
  requireCommunicationPreferences Boolean        @default(false)
  requireProfilePictureUrl        Boolean        @default(false)
  requireAllergies                Boolean        @default(false)
  requireMedicalConcerns          Boolean        @default(false)
  requirePreferredDays            Boolean        @default(false)
  requirePreferredShifts          Boolean        @default(false)
  requireFrequency                Boolean        @default(false)
  requirePreferredPrograms        Boolean        @default(false)
  requireCanCallIfShortHanded     Boolean        @default(false)
  requireSchoolWorkCommitment     Boolean        @default(false)
  requireRequiredHours            Boolean        @default(false)
  requireHowDidYouHear            Boolean        @default(false)
  requireStartDate                Boolean        @default(false)
  requireParentGuardianName       Boolean        @default(false)
  requireParentGuardianEmail      Boolean        @default(false)
  createdAt                       DateTime       @default(now())
  updatedAt                       DateTime       @updatedAt
  recurringShiftId                Int            @unique
  recurringShift                  RecurringShift @relation(fields: [recurringShiftId], references: [id], onDelete: Cascade)
}

model User {
  id                       Int                    @id @default(autoincrement())
  email                    String                 @unique
  phone                    String?                @unique
  password                 String
  firstName                String
  lastName                 String
  createdAt                DateTime               @default(now())
  organizationId           Int
  role                     UserRole               @default(VOLUNTEER)
  resetToken               String?
  resetTokenExpiry         DateTime?
  updatedAt                DateTime               @updatedAt
  approvedAt               DateTime?
  approvedBy               Int?
  denialReason             String?
  deniedAt                 DateTime?
  deniedBy                 Int?
  status                   UserStatus             @default(PENDING)
  address                  String?
  allergies                String?
  birthdate                DateTime?
  canCallIfShortHanded     Boolean?               @default(true)
  city                     String?
  emergencyContactName     String?
  emergencyContactNumber   String?
  homePhone                String?
  medicalConcerns          String?
  parentGuardianEmail      String?
  parentGuardianName       String?
  postalCode               String?
  preferredDays            String?
  preferredPrograms        String?
  preferredShifts          String?
  profilePictureUrl        String?
  registrationType         RegistrationType?      @default(ADULT)
  requiredHours            Int?
  schoolWorkCommitment     Boolean?               @default(false)
  startDate                DateTime?
  ageBracket               String?
  communicationPreferences String?
  frequency                String?
  howDidYouHear            String?
  pronouns                 String?
  DefaultShiftUser         DefaultShiftUser[]
  AbsenceApprovedBy        ShiftAbsence[]         @relation("AbsenceApprovedBy")
  ShiftAbsence             ShiftAbsence[]
  shiftSignups             ShiftSignup[]
  organization             Organization           @relation(fields: [organizationId], references: [id])
  agreements               UserAgreement[]
  modulePermissions        UserModulePermission[]
}

model WeighingCategory {
  id             Int          @id @default(autoincrement())
  organizationId Int
  kilogram_kg_   Float        @map("kilogram(kg)")
  pound_lb_      Float        @map("pound(lb)")
  category       String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([category, organizationId])
}

model Module {
  id                    Int                     @id @default(autoincrement())
  name                  String
  description           String?
  organizationId        Int
  Organization          Organization            @relation(fields: [organizationId], references: [id])
  RoleDefaultPermission RoleDefaultPermission[]
  UserModulePermission  UserModulePermission[]

  @@unique([name, organizationId])
}

model TermsAndConditions {
  id             Int             @id @default(autoincrement())
  organizationId Int
  version        String
  title          String
  fileUrl        String
  fileName       String
  fileSize       Int
  isActive       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  createdBy      Int?
  Organization   Organization    @relation(fields: [organizationId], references: [id])
  UserAgreement  UserAgreement[]

  @@unique([organizationId, version])
}

model UserAgreement {
  id                   Int                @id @default(autoincrement())
  userId               Int
  organizationId       Int
  termsAndConditionsId Int
  signature            String
  signedDocumentUrl    String?
  acceptedAt           DateTime           @default(now())
  ipAddress            String?
  userAgent            String?
  TermsAndConditions   TermsAndConditions @relation(fields: [termsAndConditionsId], references: [id])
  User                 User               @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId, termsAndConditionsId])
}

model UserModulePermission {
  id             Int     @id @default(autoincrement())
  userId         Int
  organizationId Int
  moduleId       Int
  canAccess      Boolean @default(false)
  Module         Module  @relation(fields: [moduleId], references: [id])
  User           User    @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId, moduleId])
}

model RoleDefaultPermission {
  id        Int      @id @default(autoincrement())
  role      UserRole
  moduleId  Int
  canAccess Boolean  @default(false)
  Module    Module   @relation(fields: [moduleId], references: [id])

  @@unique([role, moduleId])
}

model DonationLocation {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  location     String?
  contactInfo  String?
  kitchenId    Int
  Donation     Donation[]
  Organization Organization @relation(fields: [kitchenId], references: [id])
}

model DefaultShiftUser {
  id               Int            @id @default(autoincrement())
  recurringShiftId Int
  userId           Int
  organizationId   Int
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Organization     Organization   @relation(fields: [organizationId], references: [id])
  RecurringShift   RecurringShift @relation(fields: [recurringShiftId], references: [id], onDelete: Cascade)
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recurringShiftId, userId])
  @@index([recurringShiftId])
  @@index([userId])
}

model ShiftAbsence {
  id               Int             @id @default(autoincrement())
  userId           Int
  shiftId          Int
  recurringShiftId Int?
  organizationId   Int
  absenceType      AbsenceType     @default(UNAVAILABLE)
  reason           String?
  requestedAt      DateTime        @default(now())
  approvedAt       DateTime?
  approvedBy       Int?
  isApproved       Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  ApprovedBy       User?           @relation("AbsenceApprovedBy", fields: [approvedBy], references: [id])
  Organization     Organization    @relation(fields: [organizationId], references: [id])
  RecurringShift   RecurringShift? @relation(fields: [recurringShiftId], references: [id], onDelete: Cascade)
  Shift            Shift           @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  User             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, shiftId])
  @@index([recurringShiftId])
  @@index([userId])
  @@index([shiftId])
}

enum UserRole {
  VOLUNTEER
  STAFF
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  DENIED
}

enum RegistrationType {
  ADULT
  MINOR
}

enum AgeBracket {
  UNDER_16
  AGE_16_29
  AGE_30_39
  AGE_40_49
  AGE_50_59
  AGE_60_69
  AGE_70_PLUS
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
  PREFER_NOT_TO_SAY
}

enum CommunicationPreference {
  EMAIL
  SMS
  APP_NOTIFICATION
}

enum Frequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  DAILY
  ONCE
  WHEN_TIME_PERMITS
}

enum HowDidYouHear {
  FAMILY_FRIENDS
  GOOGLE
  SOCIAL_MEDIA
  CONNECT_FREDERICTON
  SCHOOL
  WORK
  NOTICE_BOARDS
  EVENTS
}

enum AbsenceType {
  UNAVAILABLE
  SICK_LEAVE
  PERSONAL
  VACATION
  EMERGENCY
}
