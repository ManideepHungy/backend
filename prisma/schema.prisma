generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donation {
  id             Int            @id @default(autoincrement())
  shiftId        Int?           // Made optional to support manual donations
  organizationId Int
  donorId        Int
  shiftSignupId  Int?
  createdAt      DateTime       @default(now())
  summary        Float
  Donor          Donor          @relation(fields: [donorId], references: [id])
  Organization   Organization   @relation(fields: [organizationId], references: [id])
  Shift          Shift?         @relation(fields: [shiftId], references: [id]) // Made optional
  ShiftSignup    ShiftSignup?   @relation(fields: [shiftSignupId], references: [id])
  DonationItem   DonationItem[]
}

model DonationCategory {
  id             Int            @id @default(autoincrement())
  name           String
  organizationId Int
  icon           String?
  Organization   Organization   @relation(fields: [organizationId], references: [id])
  DonationItem   DonationItem[]
}

model DonationItem {
  id               Int              @id @default(autoincrement())
  donationId       Int
  categoryId       Int
  weightKg         Float
  DonationCategory DonationCategory @relation(fields: [categoryId], references: [id])
  Donation         Donation         @relation(fields: [donationId], references: [id])

  @@unique([donationId, categoryId]) // Added unique constraint
}

model Donor {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  location     String?
  contactInfo  String?
  kitchenId    Int
  Donation     Donation[]
  Organization Organization @relation(fields: [kitchenId], references: [id])
}

model Organization {
  id                    Int                  @id @default(autoincrement())
  name                  String               @unique
  address               String?
  incoming_dollar_value Float?               @default(10)
  email                 String
  Donation              Donation[]
  DonationCategory      DonationCategory[]
  Donor                 Donor[]
  RecurringShift        RecurringShift[]
  Shift                 Shift[]
  ShiftCategory         ShiftCategory[]
  TermsAndConditions    TermsAndConditions[]
  User                  User[]
  WeighingCategory      WeighingCategory[]
}

model RecurringShift {
  id              Int           @id @default(autoincrement())
  name            String
  dayOfWeek       Int?
  startTime       DateTime
  endTime         DateTime
  shiftCategoryId Int
  location        String
  slots           Int
  organizationId  Int
  isRecurring     Boolean       @default(true)
  isActive        Boolean       @default(true)
  Organization    Organization  @relation(fields: [organizationId], references: [id])
  ShiftCategory   ShiftCategory @relation(fields: [shiftCategoryId], references: [id])
  registrationFields ShiftRegistrationFields?
  Shift           Shift[]
}

model Shift {
  id              Int           @id @default(autoincrement())
  name            String
  shiftCategoryId Int
  startTime       DateTime
  endTime         DateTime
  location        String
  slots           Int
  organizationId  Int
  isActive        Boolean       @default(true)
  recurringShiftId Int?         // Link to RecurringShift table
  Donation        Donation[]
  Organization    Organization  @relation(fields: [organizationId], references: [id])
  ShiftCategory   ShiftCategory @relation(fields: [shiftCategoryId], references: [id])
  RecurringShift  RecurringShift? @relation(fields: [recurringShiftId], references: [id], onDelete: SetNull)
  ShiftSignup     ShiftSignup[]
}

model ShiftCategory {
  id             Int              @id @default(autoincrement())
  name           String
  icon           String?
  organizationId Int
  RecurringShift RecurringShift[]
  Shift          Shift[]
  Organization   Organization     @relation(fields: [organizationId], references: [id])

  @@unique([name, organizationId])
}

model ShiftSignup {
  id          Int        @id @default(autoincrement())
  userId      Int
  shiftId     Int
  checkIn     DateTime?
  checkOut    DateTime?
  mealsServed Int?
  createdAt   DateTime   @default(now())
  Donation    Donation[]
  Shift       Shift      @relation(fields: [shiftId], references: [id])
  User        User       @relation(fields: [userId], references: [id])
}

model ShiftRegistrationFields {
  id          Int      @id @default(autoincrement())
  recurringShiftId Int @unique  // One record per recurring shift
  recurringShift RecurringShift @relation(fields: [recurringShiftId], references: [id], onDelete: Cascade)
  
  // Basic fields (always required)
  requireFirstName Boolean @default(true)
  requireLastName  Boolean @default(true)
  requireEmail     Boolean @default(true)
  
  // Personal Information
  requireAgeBracket        Boolean @default(false)
  requireBirthdate         Boolean @default(false)
  requirePronouns          Boolean @default(false)
  
  // Contact & Address
  requirePhone             Boolean @default(false)
  requireAddress           Boolean @default(false)
  requireCity              Boolean @default(false)
  requirePostalCode        Boolean @default(false)
  requireHomePhone         Boolean @default(false)
  
  // Emergency Contact
  requireEmergencyContactName    Boolean @default(false)
  requireEmergencyContactNumber  Boolean @default(false)
  
  // Communication Preferences
  requireCommunicationPreferences Boolean @default(false)
  
  // Profile
  requireProfilePictureUrl Boolean @default(false)
  
  // Health & Safety
  requireAllergies         Boolean @default(false)
  requireMedicalConcerns   Boolean @default(false)
  
  // Volunteering Preferences
  requirePreferredDays     Boolean @default(false)
  requirePreferredShifts   Boolean @default(false)
  requireFrequency         Boolean @default(false)
  requirePreferredPrograms Boolean @default(false)
  requireCanCallIfShortHanded Boolean @default(false)
  
  // Commitment Details
  requireSchoolWorkCommitment Boolean @default(false)
  requireRequiredHours     Boolean @default(false)
  
  // Additional Information
  requireHowDidYouHear     Boolean @default(false)
  requireStartDate         Boolean @default(false)
  
  // Youth Volunteer Information
  requireParentGuardianName    Boolean @default(false)
  requireParentGuardianEmail   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                Int                    @id @default(autoincrement())
  email             String                 @unique
  phone             String?                @unique
  password          String
  firstName         String
  lastName          String
  createdAt         DateTime               @default(now())
  organizationId    Int
  role              UserRole               @default(VOLUNTEER)
  status            UserStatus             @default(PENDING)
  approvedBy        Int?
  approvedAt        DateTime?
  deniedBy          Int?
  deniedAt          DateTime?
  denialReason      String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  updatedAt         DateTime               @updatedAt
  
  // NEW FIELDS - ALL NULLABLE FOR BACKWARD COMPATIBILITY
  // Registration Type
  registrationType  RegistrationType?      @default(ADULT)
  
  // Personal Information
  ageBracket        String?
  birthdate         DateTime?
  pronouns          String?
  
  // Contact & Address
  address           String?
  city              String?
  postalCode        String?
  homePhone         String?
  
  // Emergency Contact
  emergencyContactName    String?
  emergencyContactNumber  String?
  
  // Communication Preferences
  communicationPreferences String?
  
  // Profile
  profilePictureUrl String?
  
  // Health & Safety
  allergies         String?
  medicalConcerns   String?
  
  // Volunteering Preferences
  preferredDays     String?
  preferredShifts   String?
  frequency         String?
  preferredPrograms String?
  canCallIfShortHanded Boolean?            @default(true)
  
  // Commitment Details
  schoolWorkCommitment Boolean?            @default(false)
  requiredHours     Int?
  
  // Additional Information
  howDidYouHear     String?
  startDate         DateTime?
  
  // Youth Volunteer Information (for minors)
  parentGuardianName    String?
  parentGuardianEmail   String?
  
  // EXISTING RELATIONS - UNCHANGED
  shiftSignups      ShiftSignup[]
  organization      Organization           @relation(fields: [organizationId], references: [id])
  agreements        UserAgreement[]
  modulePermissions UserModulePermission[]
}

model WeighingCategory {
  id             Int          @id @default(autoincrement())
  organizationId Int
  kilogram_kg_   Float        @map("kilogram(kg)")
  pound_lb_      Float        @map("pound(lb)")
  category       String
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([category, organizationId])
}

model Module {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  description          String?
  UserModulePermission UserModulePermission[]
  RoleDefaultPermission RoleDefaultPermission[]
}

model TermsAndConditions {
  id             Int             @id @default(autoincrement())
  organizationId Int
  version        String
  title          String
  fileUrl        String
  fileName       String
  fileSize       Int
  isActive       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  createdBy      Int?
  Organization   Organization    @relation(fields: [organizationId], references: [id])
  UserAgreement  UserAgreement[]

  @@unique([organizationId, version])
}

model UserAgreement {
  id                   Int                @id @default(autoincrement())
  userId               Int
  organizationId       Int
  termsAndConditionsId Int
  signature            String
  signedDocumentUrl    String?
  acceptedAt           DateTime           @default(now())
  ipAddress            String?
  userAgent            String?
  TermsAndConditions   TermsAndConditions @relation(fields: [termsAndConditionsId], references: [id])
  User                 User               @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId, termsAndConditionsId])
}

model UserModulePermission {
  id             Int     @id @default(autoincrement())
  userId         Int
  organizationId Int
  moduleId       Int
  canAccess      Boolean @default(false)
  Module         Module  @relation(fields: [moduleId], references: [id])
  User           User    @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId, moduleId])
}

model RoleDefaultPermission {
  id             Int     @id @default(autoincrement())
  role           UserRole
  moduleId       Int
  canAccess      Boolean @default(false)
  Module         Module  @relation(fields: [moduleId], references: [id])

  @@unique([role, moduleId])
}


enum UserRole {
  VOLUNTEER
  STAFF
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  DENIED
}

enum RegistrationType {
  ADULT
  MINOR
}

enum AgeBracket {
  UNDER_16
  AGE_16_29
  AGE_30_39
  AGE_40_49
  AGE_50_59
  AGE_60_69
  AGE_70_PLUS
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
  PREFER_NOT_TO_SAY
}

enum CommunicationPreference {
  EMAIL
  SMS
  APP_NOTIFICATION
}

enum Frequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  DAILY
  ONCE
  WHEN_TIME_PERMITS
}

enum HowDidYouHear {
  FAMILY_FRIENDS
  GOOGLE
  SOCIAL_MEDIA
  CONNECT_FREDERICTON
  SCHOOL
  WORK
  NOTICE_BOARDS
  EVENTS
}